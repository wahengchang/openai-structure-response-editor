
1. User-Story Document
ID	Title	As a…	I want to…	So that…	Acceptance Criteria
US1	Create template with placeholders	Template Author	write a multi-line template containing {{var}} tags	I can define dynamic content structure	- Editor highlights valid {{…}} tags
- On blur, each tag appears in field list
US2	Auto-generate field definitions	Template Author	see name/type/default for each placeholder	I don’t need to manually configure fields	- System infers type (e.g. number, textarea)
- Default value populated
US3	Edit input values in Working Mode	Template Consumer	update each generated field’s value	I see customized output	- Fields render with default
- Changing a field updates preview instantly
US4	Render final text	Template Consumer	view the editor output with my inputs applied	I can copy/use the personalized text	- Preview shows all variables replaced
- No raw {{…}} remain

2. Simple Product Requirements
Overview
A two-mode template system: authors define templates with variables; consumers supply values and see rendered output.

2.1 Functional Requirements
Editor (Setting Mode)

Support multi-line text input.

Auto-detect {{variable}} patterns (allow duplicates).

Show inline error if syntax is unmatched.

Field Generator

For each unique variable: create a field with

Name: variable name

Type: inferred (number if default parses, else textarea)

Default: if provided in template metadata, else blank/zero.

Mode Switch

Toggle button: Setting ↔ Working.

Preserve template and field definitions across modes.

Working Mode

Display editable inputs for each field.

Render read-only template with real-time value injection.

Disable template editor.