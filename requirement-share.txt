# Product Requirement Document: “Share with Friends” Feature

## 1. Overview  
Enable users to generate a single-use link that encodes their current draft from browser storage into the URL. Recipients who open that link will see the identical content pre-loaded into their editor.

---

## 2. Purpose & Goals  
- **Purpose**  
  - Let users effortlessly share in-progress drafts without a backend.  

---

## 3. Scope  
- **In‐scope**  
  - Serializing editor state → JSON → (optional) compress → Base64 → URL‐encode → attach as `?data=` parameter.  
  - “Copy Link” UI, client-side decode on load, save to localStorage, hydrate editor.  
  - Error and length-limit warnings.  

---

## 5. User Stories & Acceptance Criteria

### 5.1. Story 1: Generate Share Link  
**As** a user with an in-progress draft  
**I want** to click a “Share” button  
**So that** I can copy a URL representing my current draft  

**Acceptance Criteria**  
- [ ] “Share” button is visible when editor has content.  
- [ ] On click, current draft is serialized, encoded, and appended as `?data=`.  
- [ ] Clipboard is populated with the full share URL.  
- [ ] A success toast “Link copied!” appears.

### 5.2. Story 2: Load Shared Draft  
**As** a friend receiving a share link  
**I want** to open the URL in my browser  
**So that** the editor loads the shared draft automatically  

**Acceptance Criteria**  
- [ ] On page load, if `?data=` exists, the app:
  - Decodes & parses the payload.  
  - Writes it to localStorage under `draft`.  
  - Populates the editor.  
  - Removes `?data=` from the URL via `history.replaceState`.  
- [ ] If decoding fails, show an error toast: “Couldn’t load shared content.”  

---

## 6. Functional Requirements

| ID   | Requirement                                                                                                                |
|------|----------------------------------------------------------------------------------------------------------------------------|
| FR1  | **Serialize** editor state: `JSON.stringify(editorState)`                                                                  |
| FR2  | **Compress** (optional): use LZ-String or similar to shrink payload                                                         |
| FR3  | **Encode**: `btoa()` → `encodeURIComponent()`                                                                               |
| FR4  | **URL Generation**: `<app-origin><path>?data=<encodedPayload>`                                                              |
| FR5  | **Clipboard**: programmatically copy URL via `navigator.clipboard.writeText()`                                              |
| FR6  | **Decode on Load**: reverse the process, `JSON.parse()`, write to `localStorage`, then hydrate editor                      |
| FR7  | **Clean URL**: use `history.replaceState` to remove query param after loading                                              |
| FR8  | **URL-Length Warning**: if URL > 1.5 KB, surface a warning about browser limits                                            |

---

## 7. Non-Functional Requirements

- **NFR1**: Share process must complete within 200 ms on typical desktop hardware.  
- **NFR2**: Support payloads up to ~1 KB raw (≈1.5 KB encoded) without failure.  

---

## 8. UX & Interaction Flow

1. **Idle State**  
   - Editor area + dark theme.  
   - “Share” button disabled until content present.

2. **Generate Link**  
   - User types → “Share” button becomes active.  
   - Click → spinner on button until encoded.  
   - Copy to clipboard + green toast: “Link copied!”

3. **Recipient Opening**  
   - On load, show loading spinner in editor until decode finishes.  
   - Success → editor shows content immediately.  
   - Failure → red toast: “Couldn’t load shared content.”

---

## 9. Data Flow Diagram

```text
[Editor State]  
      ↓ serialize  
  [ JSON String ]  
      ↓ compress?  
  [ Compressed Data ]  
      ↓ btoa() → encodeURIComponent()  
  [ URL-Safe Payload ]  
      ↓ append to URL  
  [ https://app/?data=<payload> ]  
      ↓ clipboard  
[ User Paste & Send Link ] → [ Recipient Browser Load ]  
      ↓ parse URL  
      ↓ decodeURIComponent() → atob()  
      ↓ decompress? → JSON.parse()  
      ↓ localStorage.setItem('draft', …)  
      ↓ editor.setValue(…)
